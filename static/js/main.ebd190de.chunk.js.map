{"version":3,"sources":["const.js","Cells.js","Game.js","index.js"],"names":["KEYS","DIRS","37","38","39","40","Cells","board","handleKey","cells","row","col","key","value","className","push","style","width","COLS","height","ROWS","tabIndex","onKeyDown","Game","props","event","direction","nativeEvent","keyCode","diff","Math","abs","state","nextDirection","snake","gameOver","start","bind","frame","this","setState","head","getNextIndex","food","length","indexOf","i","floor","random","pop","unshift","setTimeout","x","y","Component","ReactDOM","render","document","getElementById"],"mappings":"6KAGaA,EAAc,GAAdA,EAAsB,GAAtBA,EAAiC,GAAjCA,EAA2C,GAC3CC,EAAO,CAACC,IAAI,EAAMC,IAAI,EAAMC,IAAI,EAAMC,IAAI,G,KCsBxCC,MAtBf,YAGI,IAHiC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,UACdC,EAAQ,GAENC,EAAM,EAAGA,EDPF,GCOcA,IACzB,IAAI,IAAIC,EAAM,EAAGA,EDRI,GCQOA,IAAM,CAC9B,IAAMC,EDTW,GCSEF,EAAMC,EACnBE,EAAQN,EAAMK,GACdE,EDVE,ICUUD,EAAiB,YDVjB,ICU8BA,EAAiB,YAAc,OAC/EJ,EAAMM,KAAK,yBAAKH,IAAKA,EAAKE,UAAWA,KAG7C,OACI,yBACAE,MAAS,CAACC,MAAOC,IAAYC,OAAQC,KACrCC,SAAU,EACVC,UAAWd,EACXM,UAAU,SACLL,ICmGEc,E,kDAlHX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IA6EVhB,UAAY,SAACiB,GACT,IAAMC,EAAYD,EAAME,YAAYC,QAE9BC,EAAOC,KAAKC,IAAI,EAAKC,MAAMN,UAAYA,GAE1CzB,EAAKyB,IAAuB,IAATG,GAAuB,IAATA,IAChC,EAAKI,cAAgBP,IAlFzB,EAAKM,MAAQ,CACTzB,MAAO,GACP2B,MAAO,GACPR,UAAW,KACXS,UAAU,GAGd,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAK7B,UAAY,EAAKA,UAXR,E,gEAed+B,KAAKH,U,8BAGC,IAAD,OACC7B,EAAQ,GAER2B,EAAQ,CFzBD,IE2Bb3B,EF3Ba,IADD,EE8BZgC,KAAKC,SAAS,CACVjC,QACA2B,QACAR,UAAW1B,IACZ,WACC,EAAKsC,a,8BAIL,IAAD,SAC6BC,KAAKP,MAAhCE,EADF,EACEA,MAAO3B,EADT,EACSA,MAAOmB,EADhB,EACgBA,UAEbe,EAAOF,KAAKG,aAAaR,EAAM,GAAIR,GAEnCiB,EF5CgB,IE4CTpC,EAAMkC,IAAmC,IAAjBP,EAAMU,OAE3C,IAA4B,IAAzBV,EAAMW,QAAQJ,GAAjB,CAMA,GAAGE,EAAM,CACL,IAEIG,EAEJ,GACIA,EAAIhB,KAAKiB,MALI3B,IAKEU,KAAKkB,gBAChBzC,EAAMuC,IAEdvC,EAAMuC,GF7DY,OE+DlBvC,EAAM2B,EAAMe,OAAS,KAGzB1C,EAAMkC,GFlEM,EEmEZP,EAAMgB,QAAQT,GAEXF,KAAKN,gBACJP,EAAYa,KAAKN,cACjBM,KAAKN,cAAgB,MAGzBM,KAAKC,SAAS,CACVjC,QACA2B,QACAR,cACD,WACCyB,WAAW,EAAKb,MAAM,aAhCtBC,KAAKC,SAAS,CAACL,UAAU,M,mCA8CpBM,EAAMf,GACf,IAAI0B,EAAIX,EF/Fa,GEgGjBY,EAAIvB,KAAKiB,MAAMN,EFhGE,IEkGrB,OAAOf,GACH,KAAK1B,EAASqD,EAAIA,GAAK,EAAIjC,GAAWiC,EAAI,EAAG,MAC7C,KAAKrD,EAAWqD,EAAIA,GFpGb,GEoGuB,EAAIA,EAAG,EAAG,MACxC,KAAKrD,EAAWoD,EAAIA,GAAG,EAAIlC,GAAUkC,EAAI,EAAG,MAC5C,KAAKpD,EAAYoD,EAAIA,GAAKlC,GAAW,EAAIkC,EAAG,EAAG,MAC/C,QAAS,OAGb,OF1GqB,GE0GNC,EAAKD,I,+BAGf,IACE7C,EAASgC,KAAKP,MAAdzB,MACP,OACI,kBAAC,EAAD,CACAC,UAAW+B,KAAK/B,UAChBD,MAAOA,Q,GA7GA+C,aCAnBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.ebd190de.chunk.js","sourcesContent":["export const ROWS =20, COLS =20, CELL = 30;\r\nexport const BODY = 1, FOOD = 2;\r\nexport const START = 44;\r\nexport const KEYS = {left: 37, up: 38, right: 39, down: 40};\r\nexport const DIRS = {37: true, 38: true, 39: true, 40: true};","import React from 'react';\r\nimport {ROWS, COLS, CELL, BODY, FOOD} from './const';\r\nimport \"./style.css\";\r\n\r\nfunction Cells ({board, handleKey}) {\r\n    const cells = [];\r\n\r\n    for(let row = 0; row < ROWS; row++){\r\n        for(let col = 0; col <COLS; col++){\r\n            const key = COLS * row + col\r\n            const value = board[key]\r\n            const className = value === BODY ? 'body-cell': value === FOOD ? 'food-cell' : 'cell'\r\n            cells.push(<div key={key} className={className}></div>)\r\n        }\r\n    }\r\n    return(\r\n        <div\r\n        style = {{width: COLS *CELL, height: ROWS * CELL}}\r\n        tabIndex={0}\r\n        onKeyDown={handleKey}\r\n        className='board'>\r\n            {cells}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cells;","import React, {Component} from 'react';\r\nimport Cells from './Cells';\r\nimport {START, BODY, FOOD, KEYS, COLS, ROWS, DIRS} from './const';\r\nimport \"./style.css\";\r\n\r\nclass Game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            board: [],\r\n            snake: [],\r\n            direction: null,\r\n            gameOver: false\r\n        };\r\n\r\n        this.start = this.start.bind(this)\r\n        this.frame = this.frame.bind(this)\r\n        this.handleKey = this.handleKey\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.start()\r\n    }\r\n\r\n    start () {\r\n        const board = [];\r\n        \r\n        const snake = [START];\r\n\r\n        board[START] = BODY;\r\n\r\n        this.setState({\r\n            board,\r\n            snake,\r\n            direction: KEYS.right\r\n        }, () => {\r\n            this.frame();\r\n        })\r\n    }\r\n\r\n    frame(){\r\n        let {snake, board, direction} = this.state;\r\n\r\n        const head = this.getNextIndex(snake[0], direction)\r\n\r\n        const food = board[head] === FOOD || snake.length === 1\r\n\r\n        if(snake.indexOf(head) !== -1) {\r\n            this.setState({gameOver: true})\r\n\r\n            return\r\n        }\r\n\r\n        if(food) {\r\n            const maxCells = ROWS * COLS\r\n\r\n            let i;\r\n\r\n            do {\r\n                i = Math.floor(Math.random() * maxCells)\r\n            } while(board[i])\r\n\r\n            board[i] = FOOD\r\n        }else{\r\n            board[snake.pop()] = null;\r\n        }\r\n\r\n        board[head] = BODY;\r\n        snake.unshift(head)\r\n\r\n        if(this.nextDirection){\r\n            direction = this.nextDirection\r\n            this.nextDirection = null\r\n        }\r\n\r\n        this.setState({\r\n            board,\r\n            snake,\r\n            direction\r\n        }, () => {\r\n            setTimeout(this.frame,200)\r\n        })\r\n    }\r\n\r\n    handleKey = (event) => {\r\n        const direction = event.nativeEvent.keyCode\r\n\r\n        const diff = Math.abs(this.state.direction - direction)\r\n\r\n        if(DIRS[direction] && diff !== 0 && diff !== 2){\r\n            this.nextDirection = direction\r\n        }\r\n    }\r\n\r\n    getNextIndex(head, direction) {\r\n        let x = head % COLS;\r\n        let y = Math.floor(head / COLS);\r\n\r\n        switch(direction){\r\n            case KEYS.up: y = y <= 0 ? ROWS - 1 : y - 1; break;\r\n            case KEYS.down: y = y>=ROWS ? 0 : y +1; break;\r\n            case KEYS.left: x = x<=0 ? COLS - 1: x - 1; break;\r\n            case KEYS.right: x = x >= COLS - 1 ? 0 : x +1; break;\r\n            default: return;\r\n        }\r\n\r\n        return (COLS * y) + x;\r\n    }\r\n\r\n    render(){\r\n        const {board} = this.state\r\n        return(\r\n            <Cells\r\n            handleKey={this.handleKey} \r\n            board={board}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\n\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}